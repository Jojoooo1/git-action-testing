name: CI for release

on:
  push:
    branches: [release-*] # d. (opened, synchronize, or reopened) #

env: 
  DOCKER_USERNAME: jojoooo1

jobs:
  dump-info:
    runs-on: ubuntu-latest
    if: "! contains(toJSON(github.event.commits.*.message), '[skip-ci]')"
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"

  env_variable:
    runs-on: ubuntu-latest
    # needs: dump-info
    # will triggered after pull request merge
    # if:  github.event_name == 'push' && contains(github.ref, 'master')
    steps:
      - uses: actions/checkout@v2
      # Steps will be executed in order, if one fails following steps will not be executed 
      # **ATTENTION** can not echo var in the same step $SOURCE_BRANCH_ENV will not return anything (can only be used in next step)
      - name: Sets ENV_VARIABLE
        run: |
          echo "::set-env name=SOURCE_BRANCH_ENV::${GITHUB_REF##*/}"

      - name: Sets OUTPUT_VAR
        id: branch_name
        run: |
          echo ::set-output name=SOURCE_BRANCH_OUTPUT::${GITHUB_REF##*/}

      - name: echo VAR
        run: |
          echo $SOURCE_BRANCH_ENV
          echo ${SOURCE_BRANCH_ENV}/test

          echo $SOURCE_BRANCH_OUTPUT
          echo $DOCKER_USERNAME

          echo ${{ env.SOURCE_BRANCH_OUTPUT }}
          echo ${{ env.DOCKER_USERNAME }}
          
        env:
          SOURCE_BRANCH_OUTPUT: ${{ steps.branch_name.outputs.SOURCE_BRANCH_OUTPUT }}

        # echo ${ DOCKER_USERNAME }
          
          
        
      #
      # GITHUB_TOKEN => will not create a new workflow run (to prevent recursive flow)
      # - name: Git force push
      #   run: |
      #     touch test.sh
      #     git config --global user.name ${{ github.actor }}
      #     git config --global user.email ${{ github.actor }}@users.noreply.github.com
      #     git add .
      #     git commit -m "force pushed [skip-ci]"
      #     echo "Pushing to ${{ steps.branch_name.outputs.SOURCE_BRANCH }}"
      #     git push --force origin ${{ steps.branch_name.outputs.SOURCE_BRANCH }}
